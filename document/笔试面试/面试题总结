一、cookie和session的区别（记录客户端状态）
	cookie
	1、什么是cookie
		a、cookie是会话跟踪技术的客服端解决方案，cookie存放在客户端（通行证）。b、如果需要记录用户状态，客户端第一次向服务端发送请求服务端会给客服端颁发一个cookie，当客户端再次请求该网站的时候会把cookie一同提交给服务端。c、服务端通过检查该cookie，来判断用户状态，服务端还可以根据需要修改cookie的内容。
	2、用途
		记录用户访问次数：服务通过设置cookie的key-value可以记录客服端访问次数
	3、常见操作
		cookie过期、删除修改
	session
	1、什么是session
		session是会话跟踪技术的服务端解决方案，通过服务端来保持状态（客户端和服务端之间的一些了交互称之为一个session）。客户端请求服务端的时候，服务端会为客户端生成一个session，客户端会返回一个session id给客户端（通过cookie返回），客户端下次请求的时候携带上这个session id，服务端通过session id找到对应的信息。
	2、特点
		服务端保存、内存中保存，session内容过于复杂可能会导致内存溢出（session内容不要过长，超时时间不要过长）
	cookie和session的去区别
		1、cookie存放在客服端、session存放在服务端
		2、cookie不是很安全，别人可以直接分析客服端cookie惊喜cookie欺骗
		3、访问量增对session会导致服务端性能降低
		4、客服端cookie的大小有限制3k

二、restful接口设计原则（面向资源）
	1、uri设计，uri名称复合http规范
		url仅表示资源的路径和一些特殊的操作（一个url可以定位到唯一的资源）
		url路径从根路径到子路径命名
	2、不同接口的功能，应该对应不同HTTP方法（GET获取资源、POST创建资源、PUT修改资源、PATCH更新资源部分属性）
	3、按照规范返回http状态码
	4、服务端返回数据最好是json
	5、接口中要包含接口版本信息

三、缓存
	redis面试问题
	1、使用redis的好处
		a、速度快，所有数据都存放在内存中，硬盘只做持久化
		b、支持类型丰富，String、list、set
		c、key可以设置过期时间
	2、怎么保证redis中的数据都是热点数据（数据淘汰策略）
		设置过期时间
			最近最少使用
			将要过期的数据
			任意选择数据淘汰
		未设置过期时间
			最近最少使用
			任意选择数据淘汰
			禁止驱逐数据
	3、redis事物实现
		解决办法：redis在事物中的所有命令都将会被串行化的顺序执行，事物执行期间，redis不会再为其它客户端的请求提供任何服务，从而，保证了事物的所有命令都被原子的执行
	4、缓存穿透、缓存击穿、缓存雪崩解决方案
		缓存穿透（不存在的数据）：由于一个数据库不存在的key，如果高并发请求这条数据，会导致失去缓存的意义，流量大时会导致数据库崩溃掉
		解决办法：
			方法一：将所有可能存在的数据放在一个map中，这样一定不存在的数据就会被拦截掉
			方法二：将所有查询出来的数据，无论数据是否存在，都进行缓存，但它的过期时间会设置得短些		缓存雪崩（大范围数据缓存过期）：由于设置了相同的过期时间，导致在某一时刻同时失效，请求全部转发到DB，导致db压力过大崩溃
		解决办法：把缓存的过期时间分散开，可以在原来的过期时间上加一个随机值
		缓存击穿（真实存在的数据）：某一个key设置了过期时间，并且这个key在某个时间段会被高并发访问，如果缓存过期可能造成缓存击穿，导致数据库崩溃
		解决办法：永不过期
			在redis的过期时间基础之上，在设置一个逻辑过期时间（这个过期时间比redis过期时间要短），如果发现数据即将过期，通过开启一个后台的异步线程重新进行缓存的构建
	5、redis为什么是单线程的
		1、redis作为内存数据库，内存操作很快，网络io才是瓶颈。
		2、采用单线程避免了不必要的线程切换
		3、IO多路复用技术（epoll）
四、mysql
	1、事物的四个特性
		原子性：一个操作要么全都执行，要么全都不执行
		一致性：事物执行之前和执行结束后必须处于同一状态
		隔离性：一个事物所有修改最终提交之前，其它事物是不可见的
		持久化：事物提交之后，该事物对数据库所有的更改保存在数据库中，不能被回滚
	2、事物隔离机制
		读未提交：一个事物可以读取另外一个事物未提交的数据（出现脏读：如果另外一个事物回滚，会导致事物读取的数据不一致）
		读提交：两个事物，一个事物读取数据，一个事物修改数据，会导致读取的事物重复读取数据不一致（不可重复读：修改导致）
		可重复读：幻读，新插入一条数据会导致读取的数据不一致
		串行化：没次只能有一个事物在执行，性能差
	3、怎么提高数据查询新能
		数据设计方面
			建立索引
			对数据库进行分区（某种业务的数据单独放在一个数据库中）		sql方面
			对查询sql进行优化
			限制查询返回条数
		java方面
			使用preparedstatement预编译执行语句
		缓存方面
			使用redis缓存，对热点数据进行缓存
		检索
			使用es进行检索
	4、union和union all的区别
		union 会去除重复数据
	5、优化sql执行效率的方法
		a、进来选择较小的列存储数据
		b、将where频繁的字段建立索引
		c、select 中避免使用 select *
		d、
	6、常用SQL
		复制表结构：create table target select * from source where 1=2;
				    create table like source;
		复制表结构和数据：create table target select * from source;
		插入数据到表中：insert into target select * from source;
五、Java
	1、面向对象的特征
		抽象、继承、封装、多态
	2、java基本数据类型
		byte（8） short(16) int(23) long(64) double(64) float(32) boolean(1) char(16)
	3、StringBuffer和StringBuilder的区别
		两者的性能都比String要好，String做链接操作要创建新的String对象
		StringBuffer是线程安全的，因此StringBuilder的性能比StringBuffer的性能要好
	4、Java值传递
		java中只有值传递，方法中传递的是应用的值
	5、SynchronizedList和Vector的区别
		共同点：两个都是线程安全的集合，几乎都是用synchronized关键字修饰所有代码，add、remove性能上没有太大差距
		不同点：SynchronizedList遍历的时候需要手动进行同步处理
	6、HashMap的实现
		数组+链表（红黑树1.8）
	7、试下多线程的几种方式
		a、继承Thread（继承Runnable方法）类，重写run方法
		b、实现Runnable接口，通过Thread启动线程
		c、实现Callable接口，并通过FutureTask包装，Thread启动执行
	8、ThreadLocal
		作用：ThreadLocal为每个线程创建一个单独的变量副本，提供了一种保存对象的方法，避免线程方法传参的复杂性。
		应用场景：每个线程对应一个实例，并且线程很多地方都会用到该对象的数据。
		实现原理：Thread—>ThreadLocal.ThreadLocalMap —> Entry[] —> Entry{key, value}
			每个线程中包含ThreadLocal的内部类ThreadLocalMap，ThreadLocalMap存放当前线程所有拥有的ThreadLocal和value。
			ThreadLocal的set、get、remove方法是ThreadLocal提供访问Thread.ThreadLocalMap的工具方法。
	9、String
		A、字符串为什么设计成不可变的
			因为字符串是存放在常量池中，防止字符串被有意或无意的被篡改
		B、

六、线程池面试题
	Executors：线程池工具类，用着创建线程池
	ExecutorService：代表线程池
	ThreadPollExecutor：ExecutorService的实现类
	Runnable：线程接口
	Future：线程执行的返回接口
	1、为什么要使用线程池
		a、限制系统线程的数量，防止过度消耗内存
		b、减少系统线程创建和销毁的次数，提高性能
	2、BlockingQueue阻塞对列
		实现了如果队列为空获取线程将处于等待状态，如果对列满的，添加队列线程会处于等待状态
		put、offer 向队列添加元素，take、poll从队列获取元素
	3、yield、join、sleep、wait、notify
		针对线程调度
			sleep：当前线程休眠一段时间，但是休眠不会释放锁(Thread类方法)
			yield：通知线程等待，让其它线程有执行的机会(Thread类方法)
			join：等待调用该方法线程执行完之后才能执行(Thread实例方法)
		针对锁
			wait：线程放弃对象锁，进入等待此对象的等待锁定池，指导notify或notifyAll的时候才准备执行(Object方法)
			notify、notifyAll：唤醒在此对象监视器上等待线程(Object方法)
	4、volatile关键字
		java内存模型：jvm虚拟机分为主内存和线程内存两部分，线程内存是从主内存中copy的副本，线程之间不能直接访问线程内存，线程通信只能通过主内存，由于共享变量的修改需要读写主内存中数据，从而导致我法直接保证操作的原子性，可能产生脏读。
		如代码：int i=10; int j=i; int j=i分两步进行1、从主内存中读取i的值，2、赋值给变量j，如果另外一个线程在1、2过程之间修改了变量i，这就会导致产生脏读，导致数据不一致。
		作用：保证不同线程对变量操作的可见性，即一个线程修改了值，对其它线程是立即可见的。
			  禁止指令不会被重排序
	5、synchronized关键字
		A、synchronized修饰方法
			A.a、public synchronized void method(){}锁的范围是this(当前实例)同一个实例的多个线程之间互斥。不同实例的多个线程并发执行
			A.b、public synchronized static void method(){} 锁的范围是当前对象(Test.class)
		B、synchronized修饰代码块
			synchronized(this)和A.a的含义一致
七、设计模式
	创建型模式
		普通工厂方法：为一个内提供一个工厂方法创建实例
		静态工厂方法：提供一个静态方法创建实例，不需要new一个工厂
		抽象工厂：为不同的对象提供一个不同的工厂实现，他们都继承同一个抽象工厂
		单例模式：保证对象只有一个实例
		构建者模式：builde
		原型模式：clone
	结构性模式
		适配器模式：消除接口不匹配导致类的兼容问题（如：A接口有send方法，B类有一个sendToUser方法，这时候A和B的接口不兼容就可以使用适配器模式，添加一个C实现A的send方法，并在内部调用B的sendToUser方法）
		装饰器模式：动态增加类的功能
		动态代理模式：动态增加类的功能
			装饰器模式和动态代理模式两者的区别：两者都是增强一个类的功能，不同的地方是，装饰器模式可以动态修改需要别装饰的类，动态代理模式被代理的类是固定在代理类中的。
		桥接模式：使用一个中间桥接对象，把实现和接口区分开，桥接对象用着选择设置不同的实现类
		组合模式
		策略模式：定义了一系列的算法，并将每个算法封装起来，使它们之间可以互相替换
		模板方法模式：框架
		观察这模式：定义一个观察者和多个消费者，消费者向观察者注册，观察者负责向以注册的消费者发送消息

		工厂—单例-Builder-装饰-动态-模板-观察

八、java内存模型
	CPU高数缓存：在程序运行过程中，会将运算需要的数据从主存(物理存储器)复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。
	内存模型：Java内存模型规定所有的变量都是存在主存中，每个线程有自己的工作内存(类似CPU缓存，但是是物理存储中的一块内存)。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能直接访问其他线程的工作内存
	原子性：java中，对基本数据类型的变量的读取和赋值操作是原子操作，即这些操作是不可被中断的，要么执行，要么不执行
	可见性：volatile修饰时，它会保证修改的值会立即被更新到主存，当有其它线程需要读取时，它会去内存中读取新值。
	有序性：volatile保证一定的“有序性”，Lock、synchronized保证每个时刻是有一个线程执行同步代码。
	volatile关键字：
		作用：
			保证不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这个新值对其它线程来说是立即可见的。
			禁止进行指令重排序
		原理和实现机制：
			加入volatile关键字时，生成的汇编代码中会多出一个lock前缀指令
		lock前缀指令作用：
			保证指令的有序性、强制对缓存的修改操作立即写入主存、如果是写操作，它会导致其他CPU中对应的缓存行无效。
	volatile和synchronized的区别：
		volatile无法保证操作（代码块）的原子性。

九、MySQL、MongoDB的区别
	1、MySQL 保证事物的强一致性，项目中存在负责的sql
	2、MongoDB 可扩展的表结构、高伸缩性

十、Java虚拟机
	概念
		程序计数器（线程私有）：当前线程所执行字节码的行号指示器
		虚拟机栈（线程私有）：局部变量表、操作栈、动态链接、方法出口
		堆（线程共享）：存放对象实例
		方法区（线程共享）：存放已被虚拟机加载的类信息、常量、静态变量等类共享信息
		运行时常量池（线程共享，方法区中一块）：常量信息
	GC：垃圾回收器，主要对堆中的垃圾进行回收，java对堆进行了年代的划分，不同年代使用不同的垃圾回收器，以提高垃圾回收的效率。
	JAVA内存区域：包括栈、堆、方法区（永久代）、程序计数器
				栈：
				堆：实例对象、数组等数据
				方法区：虚拟机加载的类信息、常量、静态变量等
				程序计数器：
	判断对象是否存活
		引用计数算法：给对象添加一个应用计数器，每当有一个地方引用它就对计数器加1，取消应用就对计数器减1，计数器为0的时候代表对象没有被使用，可以进行回收。引用计数存在的问题是，不能够解决循环依赖
		可达性分析算法：通过成为GC Roots的对象作为起点，从这些节点开始向下搜索，搜索经过的所有路径称作引用链，当一个对象到GC Roots没有任何引用链时，就代表该对象可以进行回收。
	垃圾收集算法
		标记清楚算法：通过一次遍历，标记内存中哪些内存是可以回收的哪些是不可以回收的。
					问题：效率很低、会产生大量内存碎片
		复制算法：把内存分为两块，当需要进行垃圾回收的时候，把活着的内存复制到另外另外一块，然后把已使用的内存一次性清空掉。
				Eden空间 + 两块Survivor，每次使用一块Survivor空间和Eden空间，垃圾回收的时候把活着的对象复制到空闲的Survivor并清空原来使用的Survivor空间和Eden空间。
				使用年代：新生代
		标记整理算法：通过一次标记算法，标记出存活的对象，然后把存活的对象整理成连续的内存存储。
				使用场景：对象存活率较高、内存总量不是很大
				使用年代：老年代
		分代收集算法：把内存分为新生代、老年代，不同年代的内存使用不同的收集算法
				
		垃圾回收器：
			Serial（新生代）
				缺点：单线程，进行垃圾回收时需要暂停其它的进程，直到垃圾回收完成。
				优点：简单高效，比较适合内存分配较小的桌面应用。
			ParNew（新生代），Serial的多线程版本
				缺点：同Serial，进行垃圾收集的时候需要暂停其它进程。
			Parallel Scavenge（新生代）
				特点：可控制的吞吐量
			Serial Old（老年代）
			Parallel Old（老年代）
			CMS（老年代）
				特点：并发，垃圾回收线程和用户线程同时执行
			G1（新生代、老年代）
				特点：接近实时的垃圾回收，可预测的停顿时间

		堆和栈的区别:
			栈：
				主要用来存放局部变量和方法调用信息
				线程私有（生命期于线程相同）
			堆
				主要用来存储Java中的对象（无论是成员变量或是局部变量，他们都指的对象都存储在堆中）
				线程共享	
		
		简单介绍Java虚拟机
			虚拟机内存模型、判断对象是否存活、垃圾回收方式、常见垃圾回收器以及相关特性
			
		程序计数器、虚拟机栈、堆、方法区（常量池）、

十一、ES
	一、ES集群搭建配置
		cluster.name 集群名
		node.name 节点名
		path.data 数据目录
		path.logs 日志路径
		network.host 主机地址（0.0.0.0）
		http.prot:9200 (9200外部通信使用，9300节点之间访问端口)
		discovery.zen.ping.unicast.hosts：集群主机名
		discovery.zen.minimum_master_nodes ：集群最少节点数（N/2 + 1）
		node.zone 通过配置zone参数可以使指定的索引分布集群指定的接点上
	二、索引
		1、ES字段映射不能修改，如果需要修改映射字段的类型只能重新创建一个索引，然后把数据迁移到对应索引中
		2、创建索引
			http://172.16.230.129:9200/test_index/product/_mapping?pretty

		3、ES6.X 一个索引只能创建一个type
		
		4、创建索引参数
			number_of_shards：主分片数
			number_of_replicas：每个分片的副本数	
			index.routing.allocation.* 设置索引分布在哪些接点上
	三、ik中文分词
		安装：ik插件复制到plugins目录；重启es服务
		分词方式：
			ik_smart:做粗粒度分词
			ik_max_word:做最细粒度分词

	四、Java连接ES
		
	五、概念
		1、分片：每个分片是Luncene的一个实例，可以看做是一个自管理的索引。一般分片有大小限制（50G），索引分片数量决定了索引最大存储的数据量。
		2、副本：分片的备份，具有容错性，提高索引的查询性能
		3、分词器的作用：将文本分析成一个一个的词，为倒排索引做准备

十二、Spring
	1、Spring MVC工作原理
		请求提交-> DisppatcherServlet ->通过HandlerMapping查找到Controller-> 提交到对应的Controller ->处理业务逻辑 ->返回ModelAndView
	2、为什么要使用Spring
	
	3、Spring常用注解
		@RestController @RequestMapping @Service @Repository @Component @Autowire @Qualifier @PostConstruct @Configuration @PathVariable @RequestBody @RequestParam @RequestHeader @Async @Scheduled
		@Bean @Transactional @Entity（实体类） @Table @Id @Column

十三、Hadoop
		

十四、ssh免密登录步骤
	1、需要免密登陆的机器使用  ssh-keygen -t rsa 生成公钥（生成id_rsa.pub文件）
	2、追加id_rsa.pub内容到authorized_keys文件
	3、修改.ssh（700）、authorized_keys（644）权限

十五、Linux常用配置文件
	1、/etc/profile 环境变量配置文件
	2、/etc/sysconfig/network-scripts/file network配置文件
	3、/etc/security/limits.conf 用户资源限制
	4、/etc/sysctl.conf 系统信息配置文件
	5、/etc/hosts 主机和IP地址映射表
	6、/etc/hostname 主机名

十六、Linux常用命令
	mkdir、cp、mv、scp、ls、cd、rm -rf、cat、tar、ps、top、pwd、tail、more、head、chown、chmod、useradd、passwd、grep