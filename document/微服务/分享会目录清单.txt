本周工作梳理
一、周一
	1、LDAP数据同步（刘洪宇、李仁洪）
	2、数据权限功能优化（韦于评）
	3、用户属性支持默认值（张源、马平川）
	4、密码强度校验（张源、韦于评）
	5、应用code、菜单code支持自动生成和自定义生成（韦于评）
二、周二
	1、头部图片、文字可配置（张源、张建军）
	2、角色克隆（张源、刘洪宇）
	3、角色分时段权限管理（张源、刘洪宇）
	4、权限管理接口开发（通过权限获取权限所属用户）（向妤）
	5、cpu占用高问题排查（向妤）
三、周三
	1、帮助中心文档梳理（龙江、邓翔天、冯凌子）
	2、三权分立（李仁洪）
	
四、周四
	1、认证权限于API权限控制（温文宪、毕方娅）
	2、前端错误处理规范（毕方娅）
	3、选人组件优化（毕方娅）
	
五、周五
	1、单点登录证书认证方式集成，前端页面开发自测完成（马平川）
	
微服务架构设计分享

微服务概述
	概念
	微服务发展历程
		容器化技术
		
	服务架构发展
		单体应用
		水平分成
		SOA架构
		微服务架构
	微服务和SOA架构的区别
	微服务解决了什么问题
	微服务带来了什么问题
	什么场景适合使用微服务

服务拆分思想


http://server.51cto.com/Micro-551054.htm
高可用
	高可用手段
		微服务冗余（无状态化）
		负载均衡（幂等设计）
		异步化
		微服务降级
		服务治理
		服务监控系统
		
一体架构（卡车）
	一句话总结：一体化架构就像一个大容器，这个应用包含的所有的软件组件都被装配起来并紧紧地打包在一起。
	缺点：
		● 不灵活——无法使用多种技术去构建一体化应用
		● 不可靠——即便系统中只有一个功能不工作了，也会造成整个系统不工作
		● 不可扩展——应用无法被轻易地被扩展，因为每次应用需要被升级，都必须重新构建整个系统
		● 阻塞持续集成——应用中的很多功能无法同时被构建和部署
		● 迭代速度慢——一体化应用中新开发的代码需要很长时间来构建，因为需要一个一个地构建每一块功能。
		● 不适用于复杂应用——复杂应用的功能有耦合度很高的依赖

微服务（火车车厢）
	一句话总结：微服务，又叫微服务架构，是一种软件架构方式。它将应用构建成一系列按业务领域划分模块的、小的自治服务。
				在微服务架构中，每个服务都是自我包含的，并且实现了单一的业务功能
	重点：一种软件架构方式、按业务领域划分模块的、小的自治服务、实现了单一的业务功能
	是每个微服务组件都是简单灵活的，能够独立部署。不再像以前一样，应用需要一个庞大的应用服务器来支撑。
	可以由一个小团队负责更专注专业，相应的也就更高效可靠。
	微服务之间是松耦合的，微服务内部是高内聚的，每个微服务很容易按需扩展。
	微服务架构与语言工具无关，自由选择合适的语言和工具，高效的完成业务目标即可。
		
每个微服务有自己私有的数据库持久化业务数据
每个微服务只能访问自己的数据库，而不能访问其它服务的数据库
某些业务场景下，需要在一个事务中更新多个数据库。这种情况也不能直接访问其它微服务的数据库，而是通过对于微服务进行操作。
数据的去中心化，进一步降低了微服务之间的耦合度，不同服务可以采用不同的数据库技术（SQL、NoSQL等）。在复杂的业务场景下，如果包含多个微服务，通常在客户端或者中间层（网关）处理。


微服务拆分
	拆分原则
		功能拆分（垂直架构分，职责）
		业务拆分
			业务单元拆分（功能模块）
			业务需求拆分（业务需求）
	
	业务拆分（更具业务模块拆分和业务需求）
		如：视综平台
		图上监控
		人员应用
		视频应用
		角色管理
		用户管理
			注册
			登录
			搜索
			修改
				
	功能拆分（垂直架构拆分）
		网关（服务治理）
		业务逻辑层
		数据访问层（分库分表、分布式事物）
		DB层
				


1.容易开发和测试。
2.系统部署架构简单，容易部署，容易维护
3.容易扩展和伸缩
4.在业务发展早期可以快速满足需求，因为简单，所以可以迅速上线。


	